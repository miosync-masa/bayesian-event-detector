[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lambda3-dual-sync-model"
version = "0.1.0"
description = "Lambda³ Theory implementation for dual synchronization Bayesian modeling with structure tensor analysis"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "飯泉博士", email = "iizumi@lambda3.theory"},
]
keywords = ["lambda3", "bayesian", "synchronization", "structure-tensor", "time-series"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pymc>=5.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "arviz>=0.15.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "networkx>=2.6.0",
    "pandas>=1.3.0",
    "aesara>=2.8.0",
    "pytensor>=2.8.0",
    # JIT-specific dependencies for Lambda³ tensor operations
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "numba>=0.58.0",
    "numpyro>=0.13.0",
    "blackjax>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.0.0",
]
performance = [
    "cupy>=12.0.0",
    "cupyx>=12.0.0",
    "tensorflow>=2.13.0",
    "torch>=2.0.0",
    "jax[cuda]>=0.4.0",
]
lambda3_jit = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "numba>=0.58.0",
    "numpyro>=0.13.0",
    "blackjax>=1.0.0",
    "optax>=0.1.7",
    "flax>=0.7.0",
]

[project.urls]
Homepage = "https://github.com/iizumi/lambda3-dual-sync-model"
Documentation = "https://lambda3-dual-sync-model.readthedocs.io/"
Repository = "https://github.com/iizumi/lambda3-dual-sync-model.git"
Issues = "https://github.com/iizumi/lambda3-dual-sync-model/issues"

[project.scripts]
lambda3-analyze = "lambda3_dual_sync.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["lambda3_dual_sync*"]
exclude = ["tests*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=lambda3_dual_sync",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "lambda3: marks tests specific to Lambda³ theory",
    "jit: marks tests requiring JIT compilation",
    "tensor_ops: marks tests for structure tensor operations",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lambda3_dual_sync"]
known_third_party = ["pymc", "numpy", "scipy", "arviz", "matplotlib", "seaborn", "sklearn", "networkx", "pandas"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pymc.*",
    "arviz.*",
    "seaborn.*",
    "networkx.*",
    "sklearn.*",
    "aesara.*",
    "pytensor.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]
