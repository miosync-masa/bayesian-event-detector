[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lambda3-abc"
version = "0.2.0"
description = "Λ³ABC: Lambda³ Analytics for Bayes & CausalJunction - JIT-optimized financial time series analysis"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Mamichi Iizumi", email = "iizumi@miosync.com"},
]
keywords = ["lambda3", "bayesian", "synchronization", "jit", "financial", "time-series", "causality"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "pymc>=5.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "arviz>=0.15.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "networkx>=2.6.0",
    "pandas>=1.3.0",
    "aesara>=2.8.0",
    "pytensor>=2.8.0",
    # JIT-specific dependencies for Lambda³ tensor operations
    "numba>=0.58.0",
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "numpyro>=0.13.0",
    "blackjax>=1.0.0",
    # Financial data dependencies
    "yfinance>=0.2.0",
    "pandas-datareader>=0.10.0",
    "requests>=2.28.0",
    "lxml>=4.9.0",
    "beautifulsoup4>=4.11.0",
    # Data processing
    "openpyxl>=3.0.0",
    "xlrd>=2.0.0",
    "h5py>=3.7.0",
    "tables>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "coverage>=6.0.0",
    "bandit>=1.7.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "nbsphinx>=0.8.0",
    "pandoc>=2.0.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.0.0",
    "dash>=2.0.0",
    "jupyterlab>=3.0.0",
    "notebook>=6.0.0",
]
performance = [
    "cupy>=12.0.0",
    "cupyx>=12.0.0",
    "tensorflow>=2.13.0",
    "torch>=2.0.0",
    "jax[cuda]>=0.4.0",
    "rapids-cudf>=23.0.0",
    "numexpr>=2.8.0",
    "bottleneck>=1.3.0",
]
lambda3_jit = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "numba>=0.58.0",
    "numpyro>=0.13.0",
    "blackjax>=1.0.0",
    "optax>=0.1.7",
    "flax>=0.7.0",
    "diffrax>=0.4.0",
    "equinox>=0.11.0",
]
financial = [
    "yfinance>=0.2.0",
    "pandas-datareader>=0.10.0",
    "alpha-vantage>=2.3.0",
    "quandl>=3.7.0",
    "fredapi>=0.5.0",
    "finnhub-python>=2.4.0",
    "yahoo-fin>=0.8.0",
    "investpy>=1.0.0",
    "ccxt>=4.0.0",
    "ta>=0.10.0",
    "stockstats>=0.6.0",
]
ml = [
    "scikit-learn>=1.0.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
    "catboost>=1.1.0",
    "optuna>=3.0.0",
    "hyperopt>=0.2.0",
    "sklearn-pandas>=2.2.0",
    "feature-engine>=1.6.0",
]
viz = [
    "plotly>=5.0.0",
    "bokeh>=3.0.0",
    "altair>=4.2.0",
    "holoviews>=1.15.0",
    "panel>=1.0.0",
    "streamlit>=1.25.0",
    "dash>=2.0.0",
    "mplfinance>=0.12.0",
]
all = [
    "lambda3-abc[dev,docs,jupyter,performance,lambda3_jit,financial,ml,viz]",
]

[project.urls]
Homepage = "https://github.com/miosync/lambda3-abc"
Documentation = "https://lambda3-abc.readthedocs.io/"
Repository = "https://github.com/miosync/lambda3-abc.git"
Issues = "https://github.com/miosync/lambda3-abc/issues"
Changelog = "https://github.com/miosync/lambda3-abc/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/miosync/lambda3-abc/issues"

[project.scripts]
lambda3-abc = "lambda3_abc.cli:main"
l3-analyze = "lambda3_abc.analysis:main_csv_analysis"
l3-fetch = "lambda3_abc.data:fetch_financial_data"
l3-sync = "lambda3_abc.sync:calculate_sync_profile"

[tool.setuptools.packages.find]
where = ["src"]
include = ["lambda3_abc*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
lambda3_abc = ["data/*.csv", "configs/*.toml", "templates/*.html"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=lambda3_abc",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "lambda3: marks tests specific to Lambda³ theory",
    "jit: marks tests requiring JIT compilation",
    "tensor_ops: marks tests for structure tensor operations",
    "financial: marks tests for financial data operations",
    "bayesian: marks tests for Bayesian inference",
    "sync: marks tests for synchronization analysis",
    "causality: marks tests for causality detection",
    "network: marks tests for network analysis",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning:aesara.*",
    "ignore::UserWarning:numba.*",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "src/lambda3_abc/__init__.py",
    "src/lambda3_abc/cli.py",
]
parallel = true
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "# type: ignore",
    "# pragma: no cover",
]
show_missing = true
skip_covered = false
precision = 2

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
  | examples
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lambda3_abc"]
known_third_party = ["pymc", "numpy", "scipy", "arviz", "matplotlib", "seaborn", "sklearn", "networkx", "pandas", "numba", "jax", "yfinance"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_future = "Future imports"
import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "Third party imports"
import_heading_firstparty = "Lambda³ ABC imports"
import_heading_localfolder = "Local imports"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "pymc.*",
    "arviz.*",
    "seaborn.*",
    "networkx.*",
    "sklearn.*",
    "aesara.*",
    "pytensor.*",
    "numba.*",
    "jax.*",
    "jaxlib.*",
    "numpyro.*",
    "blackjax.*",
    "yfinance.*",
    "pandas_datareader.*",
    "alpha_vantage.*",
    "quandl.*",
    "fredapi.*",
    "finnhub.*",
    "yahoo_fin.*",
    "investpy.*",
    "ccxt.*",
    "ta.*",
    "stockstats.*",
    "optuna.*",
    "hyperopt.*",
    "plotly.*",
    "bokeh.*",
    "altair.*",
    "holoviews.*",
    "panel.*",
    "streamlit.*",
    "dash.*",
    "mplfinance.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert
    "S311",   # pseudo-random generators
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls
    "ANN401", # dynamically typed expressions (Any)
    "FBT001", # boolean positional arg in function definition
    "FBT002", # boolean default arg in function definition
    "COM812", # trailing comma missing
    "ISC001", # implicitly concatenated string literals
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PD901",  # avoid using generic names in pandas
    "TRY003", # avoid specifying long messages outside exception class
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["E501", "S101", "ANN", "PLR2004"]
"docs/*" = ["ALL"]
"examples/*" = ["S101", "T201", "ANN"]
"lambda3_abc.py" = ["E501", "PLR0913", "PLR0915", "C901"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601", "B311", "B324"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
generate-badge = "."

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "v$major.$minor.$patch"
version_files = [
    "src/lambda3_abc/__init__.py:__version__",
    "pyproject.toml:version"
]
bump_message = "bump: version $current_version → $new_version"
update_changelog_on_bump = true
annotated_tag = true
